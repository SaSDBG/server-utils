<?php
namespace SaS\ServiceProvider;


/**
 * Test class for APIServiceProvider.
 * Generated by PHPUnit on 2013-05-08 at 17:04:56.
 */
class APIServiceProviderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var APIServiceProvider
     */
    protected $provider;
    
    /**
     *
     * @var \Silex\Application
     */
    protected $app;
    
    protected $tokenFileH;
    
    protected $tokenFile;
    
    protected $givenTokens;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->provider = new APIServiceProvider;
        $this->app = new \Silex\Application;
        $this->app['logger'] = $this->app->share(function() {
            return new \Psr\Log\NullLogger;
        });
        
        $this->app->register($this->provider);
        
        $this->tokenFile = tempnam(sys_get_temp_dir(), 'tokens');
        $this->tokenFileH = fopen($this->tokenFile, 'w+');
        
        $tokenFile = '<?php $tokens = []; $tokens["T_MASTER"] = "abcd"; $tokens["T_FOO"] = "jkl"; return $tokens;';
        fwrite($this->tokenFileH, $tokenFile); 
        
        $this->givenTokens = [
            'T_MASTER' => 'abcd',
            'T_FOO' => 'jkl',
        ];
        
    }
    
    protected function tearDown() {
        fclose($this->tokenFileH);
    }

    public function testTokenLoaderService() {
        $this->assertTrue(is_callable($this->app['token.loader']));
        
        $this->assertSame($this->givenTokens, $this->app['token.loader']($this->tokenFile));
    }
    
    /**
     * @expectedException \RuntimeException
     */
    public function testTokenLoaderService_InvalidFile() {
        $this->app['token.loader']('thisfiledoesnotexistsdoifwroijlskdf');
    }
    
    public function testTokenRegistryService() {
        
        $this->app['token.token_file'] = $this->tokenFile;
        
        $this->assertInstanceOf('\SaS\Token\TokenRegistryInterface', $this->app['token.registry']);
        $this->assertSame($this->givenTokens, $this->app['token.registry']->getGivenTokens());
    }
    
    public function testValidatorService_DefaultChars() {
        $this->assertInstanceOf('\SaS\Validation\Validator', $this->app['validator']);
        $this->assertSame('a-zA-Z0-9()&\/', $this->app['validator']->getValidChars());
    }
    
    public function testValidatorService_GivenChars() {
        $this->app['validator.valid_chars'] = 'abc';
        $this->assertSame('abc', $this->app['validator']->getValidChars());
    }
    
    public function testNullAuthenticatorService() {
        $this->assertInstanceOf('\SaS\Security\NullAuthenticator', $this->app['security.authenticator.null']);
    }
    
    public function testAuthServerAuthenticatorService() {
        $this->markTestIncomplete('Todo: implement AuthServerAuthentication service');
    }
    
    protected function setUpSecurity() {
        $app = $this->app;
        $this->app['security.authenticator'] = function() use ($app) {
          return $app['security.authenticator.null'];  
        };
        $this->app['token.token_file'] = $this->tokenFile;
    }
    
    public function testSecurityCheckerService() {
        $this->setUpSecurity();
        
        $this->assertInstanceOf('\SaS\Security\SecurityRequirementChecker', $this->app['security.checker']);
    }
    
    public function testControllerManagerService() {
        $this->setUpSecurity();
        
        $this->assertInstanceOf('\SaS\Controller\ControllerManager', $this->app['api.controller_manager']);
    }

    /**
     * @covers SaS\ServiceProvider\APIServiceProvider::boot
     * @todo Implement testBoot().
     */
    public function testBoot()
    {
        $this->setUpSecurity();
        $this->app['api.controllers'] = [new \SaS\Test\TestController()];
        
        $this->app->boot();
        
        $this->assertInstanceOf('\Silex\Route', $this->app['routes']->get('_GET_accounts_accountID'));
    }
}
?>
