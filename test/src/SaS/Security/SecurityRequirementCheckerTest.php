<?php

namespace SaS\Security;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-04-28 at 11:29:55.
 */
class SecurityRequirementCheckerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var SecurityRequirementChecker
     */
    protected $checker;
    protected $tokenMock;
    protected $authMock;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->tokenMock = $this->getMock('\SaS\Security\TokenCheckerInterface');
        $this->authMock = $this->getMock('\SaS\Security\AuthenticatorInterface');
        $this->checker = new SecurityRequirementChecker($this->tokenMock, $this->authMock);
    }
    
    public function testIsStatisfiedBy_Success_SingleReq() {
        $requirements = [
            [
                'token_name' => 'T_FOO',
                'role' => 'ROLE_BAR'
            ]
        ];
        $user = 'asdf';
        $pass = sha1('foo');
        $token = sha1('token');
        
        $this->tokenMock->expects($this->once())
                        ->method('isToken')
                        ->with($this->equalTo('T_FOO'),
                               $this->equalTo($token))
                        ->will($this->returnValue(true));
        
        $this->authMock->expects($this->once())
                       ->method('isValidUser')
                       ->with($this->equalTo($user),
                              $this->equalTo($pass))
                       ->will($this->returnValue(true));
                
         $this->authMock->expects($this->once())
                       ->method('userHasRole')
                       ->with($this->equalTo($user),
                              $this->equalTo('ROLE_BAR'))
                       ->will($this->returnValue(true));
         $this->assertTrue($this->checker->isStatisfiedBy($requirements, $token, $user, $pass));
    }
    
    public function testIsStatisfiedBy_Success_MultiReqs() {
        $requirements = [
            [
                'token_name' => 'T_FOO',
                'role' => 'ROLE_BAR'
            ],
            [
                'token_name' => 'T_BAR',
                'role' => 'ROLE_FOO'
            ]
        ];
        
        $user_bar = 'foo';
        $pass_bar = sha1('bar');
        $token_foo = sha1('foo');
        
        $user_foo = 'bar';
        $pass_foo = sha1('asd');
        $token_bar = sha1('asdf');
        
        $this->tokenMock->expects($this->once())
                        ->method('isToken')
                        ->with($this->equalTo('T_FOO'),
                               $this->equalTo($token_foo))
                        ->will($this->returnValue(true));
        
        $this->authMock->expects($this->once())
                       ->method('isValidUser')
                       ->with($this->equalTo($user_bar),
                              $this->equalTo($pass_bar))
                       ->will($this->returnValue(true));
                
         $this->authMock->expects($this->once())
                       ->method('userHasRole')
                       ->with($this->equalTo($user_bar),
                              $this->equalTo('ROLE_BAR'))
                       ->will($this->returnValue(true));
        $this->assertTrue($this->checker->isStatisfiedBy($requirements, $token_foo, $user_bar, $pass_bar));
        
        $this->tokenMock = $this->getMock('\SaS\Security\TokenCheckerInterface');
        $this->authMock = $this->getMock('\SaS\Security\AuthenticatorInterface');
        
        $this->checker = new SecurityRequirementChecker($this->tokenMock, $this->authMock);
        
        $this->tokenMock->expects($this->exactly(2))
                        ->method('isToken')
                        ->will($this->returnValueMap([
                            ['T_FOO', $token_foo, false],
                            ['T_BAR', $token_bar, true]
                        ]));
        
        $this->authMock->expects($this->once())
                       ->method('isValidUser')
                       ->with($this->equalTo($user_foo),
                              $this->equalTo($pass_foo))
                       ->will($this->returnValue(true));
                
         $this->authMock->expects($this->once())
                       ->method('userHasRole')
                       ->with($this->equalTo($user_foo),
                              $this->equalTo('ROLE_FOO'))
                       ->will($this->returnValue(true));
         
        $this->assertTrue($this->checker->isStatisfiedBy($requirements, $token_bar, $user_foo, $pass_foo));
    }

}
