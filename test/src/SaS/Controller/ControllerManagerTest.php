<?php

namespace SaS\Controller;

use SaS\Test\TestController;

use Silex\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-04-29 at 21:37:22.
 * This Testcase is more a Integration test than a UnitTest
 */
class ControllerManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ControllerManager
     */
    protected $manager;
    
    /**
     *
     * @var \SaS\Validation\Validator
     */
    protected $validator;
    
    /**
     *
     * @var \SaS\Security\SecurityRequirementChecker
     */
    protected $secChecker;
    
    /**
     *
     * @var \Silex\Application
     */
    protected $app;
    
    /**
     *
     * @var \Symfony\Component\HttpKernel\Client
     */
    protected $client;
    
    /**
     *
     * @var \SaS\Controller\TestController
     */
    protected $controller;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->validator = new \SaS\Validation\Validator('a-zA-Z0-9&\/\"\'<>()');
        $this->secChecker = $this->getMockBuilder('SaS\Security\SecurityRequirementChecker')
                                 ->disableOriginalConstructor()
                                 ->getMock();
        
        $this->logger = $this->getMockForAbstractClass('\Psr\Log\LoggerInterface');
        
        $this->manager = new ControllerManager($this->validator, $this->secChecker, $this->logger);
        
        $this->app = new Application;
        $this->app['debug'] = true;
        $this->app['exception_handler']->disable();
        
        $this->client = new \Symfony\Component\HttpKernel\Client($this->app);
        
        $this->controller = new TestController($this);
        
        $this->manager->addController($this->controller);
        $this->app->mount('/', $this->manager);
    }
    
    protected function doRequest(array $params, $account) {
        $this->client->request('GET', '/accounts/'.$account, $params);
    }
    
    protected function setIsStatisfied($isStatisfied, array $credentials) {
        $this->secChecker->expects($this->once())
                         ->method('isStatisfiedBy')
                         ->with($this->equalTo($this->controller->getSecurityRequirements()),
                                $this->equalTo(sha1('foo')),
                                $this->equalTo('123'),
                                $this->equalTo(sha1('bar')))
                         ->will($this->returnValue($isStatisfied));
    }
    

    public function testHandleRequest_Success() {
        $params = [
            'token' => sha1('foo'),
            'user' => '123',
            'pass' => sha1('bar'),
        ];
              
        $this->setIsStatisfied(true, $params);
        
        $this->logger->expects($this->exactly(2))
                     ->method('debug')
                     ->with($this->logicalOr(
                                $this->equalTo('[ControllerManager] Handling Request'),
                                $this->equalTo('[ControllerManager] Forwarded Request to Controller')
                             ),
                             $this->equalTo(['clientIP' => '127.0.0.1'])
                       );
        
        $this->doRequest($params, '123');    
        
        
        $response = $this->client->getResponse();
        $this->assertTrue($response->isOk());
        $this->assertInstanceOf('\Symfony\Component\HttpFoundation\JsonResponse', $response);
        
        $responseData = json_decode($response->getContent(), JSON_OBJECT_AS_ARRAY);
        $expectedResponseData = [
            'accountID' => 123,
            'token' => sha1('foo'),
            'user' => '123',
            'pass' => sha1('bar'),
        ];
        $this->assertSame($expectedResponseData, $responseData);
    }
    
    public function testHandleRequest_InvalidSecurity() {
        $params = [
            'token' => sha1('foo'),
            'user' => '123',
            'pass' => sha1('bar'),
        ];
        
        $this->logger->expects($this->once())
                     ->method('debug')
                     ->with($this->equalTo('[ControllerManager] Handling Request'),
                            $this->equalTo(['clientIP' => '127.0.0.1']));
        
        $this->logger->expects($this->once())
                     ->method('error')
                     ->with($this->equalTo('[ControllerManager] Request does not statisfy security Requirements'),
                            $this->equalTo([
                                'clientIP' => '127.0.0.1',
                                'token' => sha1('foo'),
                                'user' => '123'
                            ]));
        
        $this->setIsStatisfied(false, $params);
        $this->doRequest($params, '123');
        
        $response = $this->client->getResponse();
        
        $this->assertSame($response->getStatusCode(), 403);
        
        $errors = json_decode($response->getContent(), JSON_OBJECT_AS_ARRAY);
        $this->assertSame([['code' => 107, 'message' => 'Invalid token or credentials']], $errors);
    }
    
    public function testHandleRequest_InvalidRequest() {
        $this->secChecker->expects($this->never())
                         ->method('isStatisfiedBy');
        
        $params = [
            'token' => 'asdf',
            'user' => '&%',
        ];
        
        $this->logger->expects($this->once())
                     ->method('debug')
                     ->with($this->equalTo('[ControllerManager] Handling Request'),
                            $this->equalTo(['clientIP' => '127.0.0.1'])
                       );
        $this->logger->expects($this->once())
                     ->method('error')
                     ->with($this->equalTo('[ControllerManager] Received Invalid Request'),
                            $this->equalTo(['clientIP' => '127.0.0.1']));
        
        $this->doRequest($params, 'asdf');
        
        $response = $this->client->getResponse();
        
        $this->assertSame($response->getStatusCode(), 400);
        $errors = json_decode($response->getContent(), JSON_OBJECT_AS_ARRAY);
        
        $expectedErrors = [
            ['code' => 102, 'message' => 'token is incorrect'],
            ['code' => 104, 'message' => 'user must be valid'],
            ['code' => 105, 'message' => 'pass is required'],
            ['code' => 100, 'message' => 'accountID must be an int'],
        ];
        $this->assertEquals($expectedErrors, $errors, '', 0, 10, true);
    }
}
